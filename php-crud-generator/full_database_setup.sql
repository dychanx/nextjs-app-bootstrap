-- Full database setup for PHP CRUD Generator web app with Oracle DB

-- USERS table
CREATE TABLE USERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR2(255) NOT NULL,
    FULL_NAME VARCHAR2(100),
    EMAIL VARCHAR2(100),
    CREATED_AT DATE DEFAULT SYSDATE
);

-- ACCESS_LEVELS table
CREATE TABLE ACCESS_LEVELS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LEVEL_NAME VARCHAR2(50) UNIQUE NOT NULL,
    PERMISSIONS VARCHAR2(4000) -- Comma separated permissions e.g. 'create,read,update,delete'
);

-- USER_ACCESS table (mapping users to access levels)
CREATE TABLE USER_ACCESS (
    USER_ID NUMBER NOT NULL,
    ACCESS_LEVEL_ID NUMBER NOT NULL,
    PRIMARY KEY (USER_ID, ACCESS_LEVEL_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (ACCESS_LEVEL_ID) REFERENCES ACCESS_LEVELS(ID)
);

-- LOGS table
CREATE TABLE LOGS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER,
    ACTION VARCHAR2(100),
    MENU VARCHAR2(100),
    STATUS VARCHAR2(50),
    BROWSER VARCHAR2(100),
    IP_ADDRESS VARCHAR2(50),
    TIMESTAMP DATE DEFAULT SYSDATE,
    DURATION_SECONDS NUMBER,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- THEMES table (user personalized themes)
CREATE TABLE THEMES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    THEME_NAME VARCHAR2(100),
    PRIMARY_COLOR VARCHAR2(20),
    SECONDARY_COLOR VARCHAR2(20),
    FONT_FAMILY VARCHAR2(100),
    CREATED_AT DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- Sample EMPLOYEES table (already created in sample_data.sql)
-- Included here for completeness
CREATE TABLE EMPLOYEES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    DEPARTMENT VARCHAR2(50),
    SALARY NUMBER(10, 2),
    HIRE_DATE DATE DEFAULT SYSDATE
);

-- Sample data inserts

-- Insert access levels
INSERT INTO ACCESS_LEVELS (LEVEL_NAME, PERMISSIONS) VALUES ('admin', 'create,read,update,delete');
INSERT INTO ACCESS_LEVELS (LEVEL_NAME, PERMISSIONS) VALUES ('user', 'read');

-- Insert users (passwords are plain text here for demo, replace with hashes)
INSERT INTO USERS (USERNAME, PASSWORD_HASH, FULL_NAME, EMAIL) VALUES ('admin', 'password', 'Administrator', 'admin@example.com');
INSERT INTO USERS (USERNAME, PASSWORD_HASH, FULL_NAME, EMAIL) VALUES ('user1', 'password', 'User One', 'user1@example.com');

-- Map users to access levels
INSERT INTO USER_ACCESS (USER_ID, ACCESS_LEVEL_ID) VALUES (1, 1); -- admin user to admin level
INSERT INTO USER_ACCESS (USER_ID, ACCESS_LEVEL_ID) VALUES (2, 2); -- user1 to user level

-- Insert sample employees
INSERT INTO EMPLOYEES (NAME, EMAIL, DEPARTMENT, SALARY) VALUES ('Alice Johnson', 'alice.johnson@example.com', 'Sales', 55000);
INSERT INTO EMPLOYEES (NAME, EMAIL, DEPARTMENT, SALARY) VALUES ('Bob Smith', 'bob.smith@example.com', 'Marketing', 60000);
INSERT INTO EMPLOYEES (NAME, EMAIL, DEPARTMENT, SALARY) VALUES ('Carol White', 'carol.white@example.com', 'IT', 70000);
INSERT INTO EMPLOYEES (NAME, EMAIL, DEPARTMENT, SALARY) VALUES ('David Brown', 'david.brown@example.com', 'HR', 50000);
INSERT INTO EMPLOYEES (NAME, EMAIL, DEPARTMENT, SALARY) VALUES ('Eva Green', 'eva.green@example.com', 'Finance', 65000);

COMMIT;
